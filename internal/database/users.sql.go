// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users(id, created_at, updated_at,
                  deleted_at, is_deleted,
                  name, phone_num, email, username,
                  profile_img, role, hashed_password, is_active)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, TRUE)
RETURNING id, created_at, updated_at, deleted_at, is_deleted, name, phone_num, email, username, profile_img, role, hashed_password, is_active
`

type CreateUserParams struct {
	ID             uuid.UUID
	CreatedAt      time.Time
	UpdatedAt      time.Time
	DeletedAt      sql.NullTime
	IsDeleted      bool
	Name           string
	PhoneNum       string
	Email          string
	Username       string
	ProfileImg     string
	Role           int32
	HashedPassword string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.DeletedAt,
		arg.IsDeleted,
		arg.Name,
		arg.PhoneNum,
		arg.Email,
		arg.Username,
		arg.ProfileImg,
		arg.Role,
		arg.HashedPassword,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.IsDeleted,
		&i.Name,
		&i.PhoneNum,
		&i.Email,
		&i.Username,
		&i.ProfileImg,
		&i.Role,
		&i.HashedPassword,
		&i.IsActive,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
UPDATE users
SET deleted_at = $2,
    is_deleted = true,
    updated_at = $3
WHERE id = $1
RETURNING id, created_at, updated_at, deleted_at, is_deleted, name, phone_num, email, username, profile_img, role, hashed_password, is_active
`

type DeleteUserParams struct {
	ID        uuid.UUID
	DeletedAt sql.NullTime
	UpdatedAt time.Time
}

func (q *Queries) DeleteUser(ctx context.Context, arg DeleteUserParams) error {
	_, err := q.db.ExecContext(ctx, deleteUser, arg.ID, arg.DeletedAt, arg.UpdatedAt)
	return err
}

const getAllUsers = `-- name: GetAllUsers :many
SELECT id, created_at, updated_at, deleted_at, is_deleted, name, phone_num, email, username, profile_img, role, hashed_password, is_active
FROM
    users
WHERE is_deleted = false
ORDER BY
    name ASC
LIMIT $1 OFFSET $2
`

type GetAllUsersParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetAllUsers(ctx context.Context, arg GetAllUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, getAllUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.IsDeleted,
			&i.Name,
			&i.PhoneNum,
			&i.Email,
			&i.Username,
			&i.ProfileImg,
			&i.Role,
			&i.HashedPassword,
			&i.IsActive,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, created_at, updated_at, deleted_at, is_deleted, name, phone_num, email, username, profile_img, role, hashed_password, is_active from users WHERE email=$1 AND is_deleted = false
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.IsDeleted,
		&i.Name,
		&i.PhoneNum,
		&i.Email,
		&i.Username,
		&i.ProfileImg,
		&i.Role,
		&i.HashedPassword,
		&i.IsActive,
	)
	return i, err
}

const getUserById = `-- name: GetUserById :one
SELECT id, created_at, updated_at, deleted_at, is_deleted, name, phone_num, email, username, profile_img, role, hashed_password, is_active from users WHERE id=$1 AND is_deleted = false
`

func (q *Queries) GetUserById(ctx context.Context, id uuid.UUID) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.IsDeleted,
		&i.Name,
		&i.PhoneNum,
		&i.Email,
		&i.Username,
		&i.ProfileImg,
		&i.Role,
		&i.HashedPassword,
		&i.IsActive,
	)
	return i, err
}

const getUserByUsername = `-- name: GetUserByUsername :one
SELECT id, created_at, updated_at, deleted_at, is_deleted, name, phone_num, email, username, profile_img, role, hashed_password, is_active from users WHERE username=$1 AND is_deleted = false
`

func (q *Queries) GetUserByUsername(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByUsername, username)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.IsDeleted,
		&i.Name,
		&i.PhoneNum,
		&i.Email,
		&i.Username,
		&i.ProfileImg,
		&i.Role,
		&i.HashedPassword,
		&i.IsActive,
	)
	return i, err
}

const getUserCount = `-- name: GetUserCount :one
SELECT COUNT(*) FROM users WHERE is_deleted=false
`

func (q *Queries) GetUserCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getUserCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const hardDeleteUser = `-- name: HardDeleteUser :exec
DELETE FROM users
WHERE id = $1
`

func (q *Queries) HardDeleteUser(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, hardDeleteUser, id)
	return err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET updated_at = $2,
    name = $3,
    phone_num = $4,
    email = $5,
    username = $6,
    profile_img = $7,
    role = $8
WHERE id = $1 AND is_deleted=false
RETURNING id, created_at, updated_at, deleted_at, is_deleted, name, phone_num, email, username, profile_img, role, hashed_password, is_active
`

type UpdateUserParams struct {
	ID         uuid.UUID
	UpdatedAt  time.Time
	Name       string
	PhoneNum   string
	Email      string
	Username   string
	ProfileImg string
	Role       int32
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.ID,
		arg.UpdatedAt,
		arg.Name,
		arg.PhoneNum,
		arg.Email,
		arg.Username,
		arg.ProfileImg,
		arg.Role,
	)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users
SET hashed_password=$2,
    updated_at = $3
WHERE id = $1 AND is_deleted = false
RETURNING id, created_at, updated_at, deleted_at, is_deleted, name, phone_num, email, username, profile_img, role, hashed_password, is_active
`

type UpdateUserPasswordParams struct {
	ID             uuid.UUID
	HashedPassword string
	UpdatedAt      time.Time
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPassword, arg.ID, arg.HashedPassword, arg.UpdatedAt)
	return err
}
