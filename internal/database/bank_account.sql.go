// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: bank_account.sql

package database

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const createBankAccount = `-- name: CreateBankAccount :one
INSERT INTO bank_accounts(
    id, created_at, updated_at, deleted_at, is_deleted, is_active,
    bank_id, user_id, account_number, account_type,
    name, balance, currency)
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13)
RETURNING id, created_at, updated_at, deleted_at, is_deleted, is_active, bank_id, user_id, name, account_number, account_type, balance, currency
`

type CreateBankAccountParams struct {
	ID            uuid.UUID
	CreatedAt     time.Time
	UpdatedAt     time.Time
	DeletedAt     sql.NullTime
	IsDeleted     bool
	IsActive      bool
	BankID        uuid.UUID
	UserID        uuid.UUID
	AccountNumber string
	AccountType   BankAccountType
	Name          string
	Balance       string
	Currency      string
}

func (q *Queries) CreateBankAccount(ctx context.Context, arg CreateBankAccountParams) (BankAccount, error) {
	row := q.db.QueryRowContext(ctx, createBankAccount,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.DeletedAt,
		arg.IsDeleted,
		arg.IsActive,
		arg.BankID,
		arg.UserID,
		arg.AccountNumber,
		arg.AccountType,
		arg.Name,
		arg.Balance,
		arg.Currency,
	)
	var i BankAccount
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.IsDeleted,
		&i.IsActive,
		&i.BankID,
		&i.UserID,
		&i.Name,
		&i.AccountNumber,
		&i.AccountType,
		&i.Balance,
		&i.Currency,
	)
	return i, err
}

const deleteBankAccount = `-- name: DeleteBankAccount :exec
UPDATE bank_accounts
SET deleted_at = $2,
    is_deleted = true,
    updated_at = $3
WHERE id = $1
RETURNING id, created_at, updated_at, deleted_at, is_deleted, is_active, bank_id, user_id, name, account_number, account_type, balance, currency
`

type DeleteBankAccountParams struct {
	ID        uuid.UUID
	DeletedAt sql.NullTime
	UpdatedAt time.Time
}

func (q *Queries) DeleteBankAccount(ctx context.Context, arg DeleteBankAccountParams) error {
	_, err := q.db.ExecContext(ctx, deleteBankAccount, arg.ID, arg.DeletedAt, arg.UpdatedAt)
	return err
}

const getAllBankAccount = `-- name: GetAllBankAccount :many
SELECT id, created_at, updated_at, deleted_at, is_deleted, is_active, bank_id, user_id, name, account_number, account_type, balance, currency
FROM
    bank_accounts
WHERE is_deleted = false
ORDER BY
    created_at ASC
LIMIT $1 OFFSET $2
`

type GetAllBankAccountParams struct {
	Limit  int32
	Offset int32
}

func (q *Queries) GetAllBankAccount(ctx context.Context, arg GetAllBankAccountParams) ([]BankAccount, error) {
	rows, err := q.db.QueryContext(ctx, getAllBankAccount, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BankAccount
	for rows.Next() {
		var i BankAccount
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.IsDeleted,
			&i.IsActive,
			&i.BankID,
			&i.UserID,
			&i.Name,
			&i.AccountNumber,
			&i.AccountType,
			&i.Balance,
			&i.Currency,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBankAccountById = `-- name: GetBankAccountById :one
SELECT id, created_at, updated_at, deleted_at, is_deleted, is_active, bank_id, user_id, name, account_number, account_type, balance, currency from bank_accounts WHERE id=$1 AND is_deleted = false
`

func (q *Queries) GetBankAccountById(ctx context.Context, id uuid.UUID) (BankAccount, error) {
	row := q.db.QueryRowContext(ctx, getBankAccountById, id)
	var i BankAccount
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.IsDeleted,
		&i.IsActive,
		&i.BankID,
		&i.UserID,
		&i.Name,
		&i.AccountNumber,
		&i.AccountType,
		&i.Balance,
		&i.Currency,
	)
	return i, err
}

const getBankAccountCount = `-- name: GetBankAccountCount :one
SELECT COUNT(*) FROM bank_accounts WHERE is_deleted=false
`

func (q *Queries) GetBankAccountCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getBankAccountCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getUserBankAccountCount = `-- name: GetUserBankAccountCount :one
SELECT COUNT(*) FROM bank_accounts
WHERE is_deleted=false AND user_id=$1
`

func (q *Queries) GetUserBankAccountCount(ctx context.Context, userID uuid.UUID) (int64, error) {
	row := q.db.QueryRowContext(ctx, getUserBankAccountCount, userID)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getUserBankAccounts = `-- name: GetUserBankAccounts :many
SELECT id, created_at, updated_at, deleted_at, is_deleted, is_active, bank_id, user_id, name, account_number, account_type, balance, currency
FROM
    bank_accounts
WHERE is_deleted = false AND user_id=$3
ORDER BY
    created_at ASC
LIMIT $1 OFFSET $2
`

type GetUserBankAccountsParams struct {
	Limit  int32
	Offset int32
	UserID uuid.UUID
}

func (q *Queries) GetUserBankAccounts(ctx context.Context, arg GetUserBankAccountsParams) ([]BankAccount, error) {
	rows, err := q.db.QueryContext(ctx, getUserBankAccounts, arg.Limit, arg.Offset, arg.UserID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []BankAccount
	for rows.Next() {
		var i BankAccount
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.IsDeleted,
			&i.IsActive,
			&i.BankID,
			&i.UserID,
			&i.Name,
			&i.AccountNumber,
			&i.AccountType,
			&i.Balance,
			&i.Currency,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const hardDeleteBankAccount = `-- name: HardDeleteBankAccount :exec
DELETE FROM bank_accounts
WHERE id = $1
`

func (q *Queries) HardDeleteBankAccount(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, hardDeleteBankAccount, id)
	return err
}

const updateBankAccount = `-- name: UpdateBankAccount :exec
UPDATE bank_accounts
SET updated_at = $2,
    account_number = $3,
    account_type = $4,
    is_active = $5,
    name = $6,
    balance = $7,
    currency = $8
WHERE id = $1 AND is_deleted=false
RETURNING id, created_at, updated_at, deleted_at, is_deleted, is_active, bank_id, user_id, name, account_number, account_type, balance, currency
`

type UpdateBankAccountParams struct {
	ID            uuid.UUID
	UpdatedAt     time.Time
	AccountNumber string
	AccountType   BankAccountType
	IsActive      bool
	Name          string
	Balance       string
	Currency      string
}

func (q *Queries) UpdateBankAccount(ctx context.Context, arg UpdateBankAccountParams) error {
	_, err := q.db.ExecContext(ctx, updateBankAccount,
		arg.ID,
		arg.UpdatedAt,
		arg.AccountNumber,
		arg.AccountType,
		arg.IsActive,
		arg.Name,
		arg.Balance,
		arg.Currency,
	)
	return err
}
